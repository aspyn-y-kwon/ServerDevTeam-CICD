name: Build and Deploy to AWS EC2

on:
  workflow_dispatch:
  push:
    branches: 
      - main

jobs:
  build:
    name: Build Project
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    timeout-minutes: 30
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
        with:
          repository: aspyn-y-kwon/ServerDevTeam-WAS
          ref: main
          token: ${{ secrets.PAT }} 
          path: ./source-code
          fetch-depth: 0
          persist-credentials: false
             

      - name: Checkout Infra Repo
        uses: actions/checkout@v4
        with:
          repository: aspyn-y-kwon/ServerDevTeam-CICD
          ref: main
          token: ${{ secrets.PAT }} 
          path: ./infra

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Maven 3.6.3
        run: |
          MAVEN_VERSION=3.6.3
          MAVEN_DOWNLOAD_URL=https://archive.apache.org/dist/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz
          
          # Download Maven
          curl -L ${MAVEN_DOWNLOAD_URL} -o maven.tar.gz
          
          # Extract Maven
          sudo mkdir -p /opt/maven
          sudo tar -xzf maven.tar.gz -C /opt/maven --strip-components=1
          
          # Set environment variables
          echo "M2_HOME=/opt/maven" >> $GITHUB_ENV
          echo "PATH=/opt/maven/bin:$PATH" >> $GITHUB_ENV
          
          # Clean up
          rm maven.tar.gz

      - name: Verify Maven Installation
        run: |
          echo "M2_HOME: $M2_HOME"
          echo "PATH: $PATH"
          mvn -v

      # Junit Test 추가
      - name: Run JUnit Tests with Coverage
        run: |
          mvn test verify jacoco:report --file ./source-code/pom.xml

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_HOST_URL: "http://52.9.196.222:9000"
        run: |
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2.0:sonar \
            -Dsonar.projectKey=github-actions-test-project \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }} \
            -Dsonar.java.binaries=./source-code/target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=./source-code/target/site/jacoco/jacoco.xml \
            -Dsonar.java.source=1.8 \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.verbose=true \
            --file ./source-code/pom.xml

      - name: Build with Maven (WAR)
        run: mvn clean package --file ./source-code/pom.xml

      # - name: Run JUnit Tests
      #   run: |
      #     mvn test --file ./source-code/pom.xml



      - name: Copy appspec.yml and scripts to source-code directory
        run: |
          mkdir -p ./source-code/scripts
          cp ./infra/appspec.yml ./source-code/
          cp ./infra/scripts/*.sh ./source-code/scripts/
          chmod +x ./source-code/scripts/*.sh

      - name: Compress Build Artifact
        run: tar -cvzf build.tar.gz -C . source-code

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRETS_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Upload to S3
        env:
          AWS_S3_BUCKET: tb-ca-github-actions
        run: |
          aws s3 cp build.tar.gz s3://${{ env.AWS_S3_BUCKET }}/build.tar.gz


  deploy:
    name: Deploy to EC2 via CodeDeploy
    needs: build
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    steps:
      - name: Deploy with AWS CodeDeploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETS_ACCESS_KEY }}
          AWS_CODEDEPLOY_APP : github-actions
          AWS_DEPLOY_GROUP : Deploy_EC2
          AWS_S3_BUCKET : tb-ca-github-actions
        run: |
          aws deploy create-deployment \
          --application-name ${{ env.AWS_CODEDEPLOY_APP }} \
          --deployment-group-name ${{ env.AWS_DEPLOY_GROUP }} \
          --s3-location bucket=${{ env.AWS_S3_BUCKET }},bundleType=tgz,key=build.tar.gz \
          --file-exists-behavior OVERWRITE
